// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: values_array.gen.go.tmpl

package gen

type FloatArrayValuesSequence struct {
	v  []float64
	vi int
}

func NewFloatArrayValuesSequence(v []float64) *FloatArrayValuesSequence {
	return &FloatArrayValuesSequence{
		v: v,
	}
}

func (g *FloatArrayValuesSequence) Reset() {
	g.vi = 0
}

func (g *FloatArrayValuesSequence) Write(vs []float64) {
	var (
		v  = g.v
		vi = g.vi
	)
	for i := 0; i < len(vs); i++ {
		if vi >= len(v) {
			vi = 0
		}
		vs[i] = v[vi]
		vi += 1
	}
	g.vi = vi
}

type IntegerArrayValuesSequence struct {
	v  []int64
	vi int
}

func NewIntegerArrayValuesSequence(v []int64) *IntegerArrayValuesSequence {
	return &IntegerArrayValuesSequence{
		v: v,
	}
}

func (g *IntegerArrayValuesSequence) Reset() {
	g.vi = 0
}

func (g *IntegerArrayValuesSequence) Write(vs []int64) {
	var (
		v  = g.v
		vi = g.vi
	)
	for i := 0; i < len(vs); i++ {
		if vi >= len(v) {
			vi = 0
		}
		vs[i] = v[vi]
		vi += 1
	}
	g.vi = vi
}

type UnsignedArrayValuesSequence struct {
	v  []uint64
	vi int
}

func NewUnsignedArrayValuesSequence(v []uint64) *UnsignedArrayValuesSequence {
	return &UnsignedArrayValuesSequence{
		v: v,
	}
}

func (g *UnsignedArrayValuesSequence) Reset() {
	g.vi = 0
}

func (g *UnsignedArrayValuesSequence) Write(vs []uint64) {
	var (
		v  = g.v
		vi = g.vi
	)
	for i := 0; i < len(vs); i++ {
		if vi >= len(v) {
			vi = 0
		}
		vs[i] = v[vi]
		vi += 1
	}
	g.vi = vi
}

type StringArrayValuesSequence struct {
	v  []string
	vi int
}

func NewStringArrayValuesSequence(v []string) *StringArrayValuesSequence {
	return &StringArrayValuesSequence{
		v: v,
	}
}

func (g *StringArrayValuesSequence) Reset() {
	g.vi = 0
}

func (g *StringArrayValuesSequence) Write(vs []string) {
	var (
		v  = g.v
		vi = g.vi
	)
	for i := 0; i < len(vs); i++ {
		if vi >= len(v) {
			vi = 0
		}
		vs[i] = v[vi]
		vi += 1
	}
	g.vi = vi
}

type BooleanArrayValuesSequence struct {
	v  []bool
	vi int
}

func NewBooleanArrayValuesSequence(v []bool) *BooleanArrayValuesSequence {
	return &BooleanArrayValuesSequence{
		v: v,
	}
}

func (g *BooleanArrayValuesSequence) Reset() {
	g.vi = 0
}

func (g *BooleanArrayValuesSequence) Write(vs []bool) {
	var (
		v  = g.v
		vi = g.vi
	)
	for i := 0; i < len(vs); i++ {
		if vi >= len(v) {
			vi = 0
		}
		vs[i] = v[vi]
		vi += 1
	}
	g.vi = vi
}
